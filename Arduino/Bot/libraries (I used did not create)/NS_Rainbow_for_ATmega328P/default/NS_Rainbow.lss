
NS_Rainbow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000d34  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000068  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001af  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000de4  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000047c  00000000  00000000  0000254e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ccd  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00003698  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000300  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f74  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000009d  00000000  00000000  00004a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00004ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 48 06 	jmp	0xc90	; 0xc90 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#define USELED	64						// Using LED Value


int main(void)
{	
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f e3       	ldi	r24, 0x3F	; 63
  b2:	9c e9       	ldi	r25, 0x9C	; 156
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x14>
  ba:	00 00       	nop
	*			                  -> NS-Rainbow_init(8, PB, 2);
	*
	****************************************************************************************************/

	_delay_ms(10);
	NS_Rainbow_init(USELED, PB, 0);
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	65 e2       	ldi	r22, 0x25	; 37
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	0e 94 9c 02 	call	0x538	; 0x538 <NS_Rainbow_init>


	setBrightness(50); 	// 0,1(OFF) ~ 255
  c8:	82 e3       	ldi	r24, 0x32	; 50
  ca:	0e 94 2b 03 	call	0x656	; 0x656 <setBrightness>
  ce:	eb c0       	rjmp	.+470    	; 0x2a6 <main+0x200>
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
		{
			line = i * 8;
  d0:	f0 2e       	mov	r15, r16
  d2:	ff 0c       	add	r15, r15
  d4:	ff 0c       	add	r15, r15
  d6:	ff 0c       	add	r15, r15
			setColor(0 + line, 255, 0, 0);				// RED
  d8:	8f 2d       	mov	r24, r15
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	6f ef       	ldi	r22, 0xFF	; 255
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(1 + line, 255, 94, 0);				// Orange
  e6:	cf 2d       	mov	r28, r15
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	6f ef       	ldi	r22, 0xFF	; 255
  f0:	4e e5       	ldi	r20, 0x5E	; 94
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(2 + line, 255, 228, 0);			// Yellow
  f8:	ce 01       	movw	r24, r28
  fa:	02 96       	adiw	r24, 0x02	; 2
  fc:	6f ef       	ldi	r22, 0xFF	; 255
  fe:	44 ee       	ldi	r20, 0xE4	; 228
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(3 + line, 29, 219, 22);			// Green
 106:	ce 01       	movw	r24, r28
 108:	03 96       	adiw	r24, 0x03	; 3
 10a:	6d e1       	ldi	r22, 0x1D	; 29
 10c:	4b ed       	ldi	r20, 0xDB	; 219
 10e:	26 e1       	ldi	r18, 0x16	; 22
 110:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(4 + line, 0, 0, 255);				// Blue
 114:	ce 01       	movw	r24, r28
 116:	04 96       	adiw	r24, 0x04	; 4
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(5 + line, 1, 0, 255);				// Dark Blue
 122:	ce 01       	movw	r24, r28
 124:	05 96       	adiw	r24, 0x05	; 5
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(6 + line, 63, 0, 153);				// Purple
 130:	ce 01       	movw	r24, r28
 132:	06 96       	adiw	r24, 0x06	; 6
 134:	6f e3       	ldi	r22, 0x3F	; 63
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	29 e9       	ldi	r18, 0x99	; 153
 13a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
			setColor(7 + line, 255, 0, 221);			// Pink
 13e:	ce 01       	movw	r24, r28
 140:	07 96       	adiw	r24, 0x07	; 7
 142:	6f ef       	ldi	r22, 0xFF	; 255
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	2d ed       	ldi	r18, 0xDD	; 221
 148:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>

			show();
 14c:	0e 94 40 02 	call	0x480	; 0x480 <show>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	91 ee       	ldi	r25, 0xE1	; 225
 154:	a4 e0       	ldi	r26, 0x04	; 4
 156:	81 50       	subi	r24, 0x01	; 1
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	a0 40       	sbci	r26, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0xb0>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xba>
 160:	00 00       	nop
	while(1)
	{
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	08 30       	cpi	r16, 0x08	; 8
 168:	11 05       	cpc	r17, r1
 16a:	0c f4       	brge	.+2      	; 0x16e <main+0xc8>
 16c:	b1 cf       	rjmp	.-158    	; 0xd0 <main+0x2a>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	99 e6       	ldi	r25, 0x69	; 105
 172:	a8 e1       	ldi	r26, 0x18	; 24
 174:	81 50       	subi	r24, 0x01	; 1
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	a0 40       	sbci	r26, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xce>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xd8>
 17e:	00 00       	nop
			_delay_ms(100);
		}		
		_delay_ms(500);


		for(int i = USELED; i >= 0; i--)
 180:	c0 e4       	ldi	r28, 0x40	; 64
 182:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cell_clear(i);
 184:	ce 01       	movw	r24, r28
 186:	0e 94 23 03 	call	0x646	; 0x646 <cell_clear>
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	96 e7       	ldi	r25, 0x76	; 118
 18e:	a1 e0       	ldi	r26, 0x01	; 1
 190:	81 50       	subi	r24, 0x01	; 1
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	a0 40       	sbci	r26, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xea>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xf4>
 19a:	00 00       	nop
			_delay_ms(100);
		}		
		_delay_ms(500);


		for(int i = USELED; i >= 0; i--)
 19c:	21 97       	sbiw	r28, 0x01	; 1
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	cf 3f       	cpi	r28, 0xFF	; 255
 1a2:	d9 07       	cpc	r29, r25
 1a4:	79 f7       	brne	.-34     	; 0x184 <main+0xde>
 1a6:	08 e3       	ldi	r16, 0x38	; 56
		}

		for(int i = 7; i >= 0; i--)
		{
			line = i * 8;
			setColor_RGB(0 + line, 0xFF0000);			// RED
 1a8:	80 2f       	mov	r24, r16
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	6f ef       	ldi	r22, 0xFF	; 255
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(1 + line, 0xFF5E00);			// Orange
 1b8:	c0 2f       	mov	r28, r16
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	5e e5       	ldi	r21, 0x5E	; 94
 1c4:	6f ef       	ldi	r22, 0xFF	; 255
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(2 + line, 0xFFE400);			// Yellow
 1cc:	ce 01       	movw	r24, r28
 1ce:	02 96       	adiw	r24, 0x02	; 2
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	54 ee       	ldi	r21, 0xE4	; 228
 1d4:	6f ef       	ldi	r22, 0xFF	; 255
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(3 + line, 0x1DDB16);			// Green
 1dc:	ce 01       	movw	r24, r28
 1de:	03 96       	adiw	r24, 0x03	; 3
 1e0:	46 e1       	ldi	r20, 0x16	; 22
 1e2:	5b ed       	ldi	r21, 0xDB	; 219
 1e4:	6d e1       	ldi	r22, 0x1D	; 29
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(4 + line, 0x0000FF);			// Blue
 1ec:	ce 01       	movw	r24, r28
 1ee:	04 96       	adiw	r24, 0x04	; 4
 1f0:	4f ef       	ldi	r20, 0xFF	; 255
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
 1fc:	ce 01       	movw	r24, r28
 1fe:	05 96       	adiw	r24, 0x05	; 5
 200:	4f ef       	ldi	r20, 0xFF	; 255
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(6 + line, 0x3F0099);			// Purple
 20c:	ce 01       	movw	r24, r28
 20e:	06 96       	adiw	r24, 0x06	; 6
 210:	49 e9       	ldi	r20, 0x99	; 153
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	6f e3       	ldi	r22, 0x3F	; 63
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
			setColor_RGB(7 + line, 0xFF00DD);			// Pink
 21c:	ce 01       	movw	r24, r28
 21e:	07 96       	adiw	r24, 0x07	; 7
 220:	4d ed       	ldi	r20, 0xDD	; 221
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	6f ef       	ldi	r22, 0xFF	; 255
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
		
			show();
 22c:	0e 94 40 02 	call	0x480	; 0x480 <show>
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	91 ee       	ldi	r25, 0xE1	; 225
 234:	a4 e0       	ldi	r26, 0x04	; 4
 236:	81 50       	subi	r24, 0x01	; 1
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	a0 40       	sbci	r26, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x190>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x19a>
 240:	00 00       	nop
 242:	08 50       	subi	r16, 0x08	; 8
		{
			cell_clear(i);
			_delay_ms(30);
		}

		for(int i = 7; i >= 0; i--)
 244:	08 3f       	cpi	r16, 0xF8	; 248
 246:	09 f0       	breq	.+2      	; 0x24a <main+0x1a4>
 248:	af cf       	rjmp	.-162    	; 0x1a8 <main+0x102>
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	99 e6       	ldi	r25, 0x69	; 105
 24e:	a8 e1       	ldi	r26, 0x18	; 24
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	a0 40       	sbci	r26, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x1aa>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x1b4>
 25a:	00 00       	nop
			_delay_ms(100);
		}	
		_delay_ms(500);

	
		for(int i = 0; i <= USELED; i++)
 25c:	c0 e0       	ldi	r28, 0x00	; 0
 25e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cell_clear(i);
 260:	ce 01       	movw	r24, r28
 262:	0e 94 23 03 	call	0x646	; 0x646 <cell_clear>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	96 e7       	ldi	r25, 0x76	; 118
 26a:	a1 e0       	ldi	r26, 0x01	; 1
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x1c6>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x1d0>
 276:	00 00       	nop
			_delay_ms(100);
		}	
		_delay_ms(500);

	
		for(int i = 0; i <= USELED; i++)
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	c1 34       	cpi	r28, 0x41	; 65
 27c:	d1 05       	cpc	r29, r1
 27e:	81 f7       	brne	.-32     	; 0x260 <main+0x1ba>
			_delay_ms(30);
		}


		for(int i = 0; i < 2; i++)
			rainbow(10);
 280:	8a e0       	ldi	r24, 0x0A	; 10
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 25 04 	call	0x84a	; 0x84a <rainbow>
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 25 04 	call	0x84a	; 0x84a <rainbow>

		

		clear();
 290:	0e 94 13 03 	call	0x626	; 0x626 <clear>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	93 ed       	ldi	r25, 0xD3	; 211
 298:	a0 e3       	ldi	r26, 0x30	; 48
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x1f4>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x1fe>
 2a4:	00 00       	nop
	while(1)
	{
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	5d cf       	rjmp	.-326    	; 0x166 <main+0xc0>

000002ac <rst_delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	87 ec       	ldi	r24, 0xC7	; 199
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <rst_delay+0x4>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <rst_delay+0xa>
 2b6:	00 00       	nop

volatile uint8_t *port;
volatile uint8_t maskPin;
volatile uint8_t brightness = 255;

void rst_delay(void) {_delay_us(50);}
 2b8:	08 95       	ret

000002ba <delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ba:	20 ea       	ldi	r18, 0xA0	; 160
 2bc:	3f e0       	ldi	r19, 0x0F	; 15
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <delay+0x14>
 2c0:	f9 01       	movw	r30, r18
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <delay+0x8>
 2c6:	61 50       	subi	r22, 0x01	; 1
 2c8:	70 40       	sbci	r23, 0x00	; 0
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	61 15       	cp	r22, r1
 2d0:	71 05       	cpc	r23, r1
 2d2:	81 05       	cpc	r24, r1
 2d4:	91 05       	cpc	r25, r1
 2d6:	a1 f7       	brne	.-24     	; 0x2c0 <delay+0x6>
 2d8:	08 95       	ret

000002da <setPin>:
}


void setPin(uint8_t _port, uint8_t _bit)
{
	*(volatile uint8_t *)(_port - 0x01) |= ( 1 << _bit );
 2da:	e8 2f       	mov	r30, r24
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	df 01       	movw	r26, r30
 2e0:	2e 91       	ld	r18, -X
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <setPin+0x12>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <setPin+0xe>
 2f0:	28 2b       	or	r18, r24
 2f2:	2c 93       	st	X, r18
	*(volatile uint8_t *)_port &= ~( 1 << _bit );
 2f4:	90 81       	ld	r25, Z
 2f6:	80 95       	com	r24
 2f8:	89 23       	and	r24, r25
 2fa:	80 83       	st	Z, r24
}
 2fc:	08 95       	ret

000002fe <setColor>:


void setColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b)		// LED 64EA = ( n = 0 ~ 63 )
{
	if(n < nCells)
 2fe:	e0 91 0e 01 	lds	r30, 0x010E
 302:	f0 91 0f 01 	lds	r31, 0x010F
 306:	8e 17       	cp	r24, r30
 308:	9f 07       	cpc	r25, r31
 30a:	08 f0       	brcs	.+2      	; 0x30e <setColor+0x10>
 30c:	55 c0       	rjmp	.+170    	; 0x3b8 <setColor+0xba>
	{
		if(brightness < 0xFF)
 30e:	30 91 04 01 	lds	r19, 0x0104
 312:	3f 3f       	cpi	r19, 0xFF	; 255
 314:	09 f4       	brne	.+2      	; 0x318 <setColor+0x1a>
 316:	3f c0       	rjmp	.+126    	; 0x396 <setColor+0x98>
		{
			if(brightness > 0x01)
 318:	30 91 04 01 	lds	r19, 0x0104
 31c:	32 30       	cpi	r19, 0x02	; 2
 31e:	b0 f1       	brcs	.+108    	; 0x38c <setColor+0x8e>
			{
				uint16_t cb = brightness + 1, t = 0;
 320:	e0 91 04 01 	lds	r30, 0x0104
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	31 96       	adiw	r30, 0x01	; 1
    		
	    		t = (g|0x01) * cb;
 328:	41 60       	ori	r20, 0x01	; 1
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	4e 9f       	mul	r20, r30
 32e:	d0 01       	movw	r26, r0
 330:	4f 9f       	mul	r20, r31
 332:	b0 0d       	add	r27, r0
 334:	5e 9f       	mul	r21, r30
 336:	b0 0d       	add	r27, r0
 338:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 33a:	a1 38       	cpi	r26, 0x81	; 129
 33c:	b1 05       	cpc	r27, r1
 33e:	20 f0       	brcs	.+8      	; 0x348 <setColor+0x4a>
 340:	a0 58       	subi	r26, 0x80	; 128
 342:	b0 40       	sbci	r27, 0x00	; 0
 344:	4b 2f       	mov	r20, r27
 346:	01 c0       	rjmp	.+2      	; 0x34a <setColor+0x4c>
 348:	40 e0       	ldi	r20, 0x00	; 0
	    		t = (r|0x01) * cb;
 34a:	61 60       	ori	r22, 0x01	; 1
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	6e 9f       	mul	r22, r30
 350:	d0 01       	movw	r26, r0
 352:	6f 9f       	mul	r22, r31
 354:	b0 0d       	add	r27, r0
 356:	7e 9f       	mul	r23, r30
 358:	b0 0d       	add	r27, r0
 35a:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 35c:	a1 38       	cpi	r26, 0x81	; 129
 35e:	b1 05       	cpc	r27, r1
 360:	20 f0       	brcs	.+8      	; 0x36a <setColor+0x6c>
 362:	a0 58       	subi	r26, 0x80	; 128
 364:	b0 40       	sbci	r27, 0x00	; 0
 366:	6b 2f       	mov	r22, r27
 368:	01 c0       	rjmp	.+2      	; 0x36c <setColor+0x6e>
 36a:	60 e0       	ldi	r22, 0x00	; 0
	    		t = (b|0x01) * cb;
 36c:	21 60       	ori	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	2e 9f       	mul	r18, r30
 372:	d0 01       	movw	r26, r0
 374:	2f 9f       	mul	r18, r31
 376:	b0 0d       	add	r27, r0
 378:	3e 9f       	mul	r19, r30
 37a:	b0 0d       	add	r27, r0
 37c:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 37e:	a1 38       	cpi	r26, 0x81	; 129
 380:	b1 05       	cpc	r27, r1
 382:	40 f0       	brcs	.+16     	; 0x394 <setColor+0x96>
 384:	a0 58       	subi	r26, 0x80	; 128
 386:	b0 40       	sbci	r27, 0x00	; 0
 388:	2b 2f       	mov	r18, r27
 38a:	05 c0       	rjmp	.+10     	; 0x396 <setColor+0x98>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 38c:	20 e0       	ldi	r18, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 38e:	40 e0       	ldi	r20, 0x00	; 0
    			r = 0x00;
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	01 c0       	rjmp	.+2      	; 0x396 <setColor+0x98>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 394:	20 e0       	ldi	r18, 0x00	; 0
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
			}
		}
		uint8_t *p = &cells[n * 3];
 396:	dc 01       	movw	r26, r24
 398:	aa 0f       	add	r26, r26
 39a:	bb 1f       	adc	r27, r27
 39c:	a8 0f       	add	r26, r24
 39e:	b9 1f       	adc	r27, r25
 3a0:	e0 91 12 01 	lds	r30, 0x0112
 3a4:	f0 91 13 01 	lds	r31, 0x0113
 3a8:	ea 0f       	add	r30, r26
 3aa:	fb 1f       	adc	r31, r27

		*p++ = g;
 3ac:	df 01       	movw	r26, r30
 3ae:	4d 93       	st	X+, r20
		*p++ = r;
 3b0:	61 83       	std	Z+1, r22	; 0x01
		*p = b;
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	2c 93       	st	X, r18
 3b6:	11 97       	sbiw	r26, 0x01	; 1
 3b8:	08 95       	ret

000003ba <setColor_RGB>:
	}
}


void setColor_RGB(uint16_t n, uint32_t c)
{
 3ba:	1f 93       	push	r17
	if(n < nCells)
 3bc:	20 91 0e 01 	lds	r18, 0x010E
 3c0:	30 91 0f 01 	lds	r19, 0x010F
 3c4:	82 17       	cp	r24, r18
 3c6:	93 07       	cpc	r25, r19
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <setColor_RGB+0x12>
 3ca:	58 c0       	rjmp	.+176    	; 0x47c <setColor_RGB+0xc2>
	{
		uint8_t 
			r = (uint8_t)(c >> 16),
			g = (uint8_t)(c >>  8),
 3cc:	15 2f       	mov	r17, r21
			b = (uint8_t)c;

		if(brightness < 0xFF)
 3ce:	20 91 04 01 	lds	r18, 0x0104
 3d2:	2f 3f       	cpi	r18, 0xFF	; 255
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <setColor_RGB+0x1e>
 3d6:	41 c0       	rjmp	.+130    	; 0x45a <setColor_RGB+0xa0>
		{
			if(brightness > 0x01)
 3d8:	20 91 04 01 	lds	r18, 0x0104
 3dc:	22 30       	cpi	r18, 0x02	; 2
 3de:	c0 f1       	brcs	.+112    	; 0x450 <setColor_RGB+0x96>
			{
				uint16_t cb = brightness + 1, t = 0;
 3e0:	20 91 04 01 	lds	r18, 0x0104
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
    		
	    		t = (g|0x01) * cb;
 3ea:	11 60       	ori	r17, 0x01	; 1
 3ec:	a1 2f       	mov	r26, r17
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	a2 9f       	mul	r26, r18
 3f2:	f0 01       	movw	r30, r0
 3f4:	a3 9f       	mul	r26, r19
 3f6:	f0 0d       	add	r31, r0
 3f8:	b2 9f       	mul	r27, r18
 3fa:	f0 0d       	add	r31, r0
 3fc:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 3fe:	e1 38       	cpi	r30, 0x81	; 129
 400:	f1 05       	cpc	r31, r1
 402:	20 f0       	brcs	.+8      	; 0x40c <setColor_RGB+0x52>
 404:	e0 58       	subi	r30, 0x80	; 128
 406:	f0 40       	sbci	r31, 0x00	; 0
 408:	1f 2f       	mov	r17, r31
 40a:	01 c0       	rjmp	.+2      	; 0x40e <setColor_RGB+0x54>
 40c:	10 e0       	ldi	r17, 0x00	; 0
	    		t = (r|0x01) * cb;
 40e:	61 60       	ori	r22, 0x01	; 1
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	62 9f       	mul	r22, r18
 414:	f0 01       	movw	r30, r0
 416:	63 9f       	mul	r22, r19
 418:	f0 0d       	add	r31, r0
 41a:	72 9f       	mul	r23, r18
 41c:	f0 0d       	add	r31, r0
 41e:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 420:	e1 38       	cpi	r30, 0x81	; 129
 422:	f1 05       	cpc	r31, r1
 424:	20 f0       	brcs	.+8      	; 0x42e <setColor_RGB+0x74>
 426:	e0 58       	subi	r30, 0x80	; 128
 428:	f0 40       	sbci	r31, 0x00	; 0
 42a:	6f 2f       	mov	r22, r31
 42c:	01 c0       	rjmp	.+2      	; 0x430 <setColor_RGB+0x76>
 42e:	60 e0       	ldi	r22, 0x00	; 0
	    		t = (b|0x01) * cb;
 430:	41 60       	ori	r20, 0x01	; 1
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	42 9f       	mul	r20, r18
 436:	f0 01       	movw	r30, r0
 438:	43 9f       	mul	r20, r19
 43a:	f0 0d       	add	r31, r0
 43c:	52 9f       	mul	r21, r18
 43e:	f0 0d       	add	r31, r0
 440:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 442:	e1 38       	cpi	r30, 0x81	; 129
 444:	f1 05       	cpc	r31, r1
 446:	40 f0       	brcs	.+16     	; 0x458 <setColor_RGB+0x9e>
 448:	e0 58       	subi	r30, 0x80	; 128
 44a:	f0 40       	sbci	r31, 0x00	; 0
 44c:	4f 2f       	mov	r20, r31
 44e:	05 c0       	rjmp	.+10     	; 0x45a <setColor_RGB+0xa0>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 450:	40 e0       	ldi	r20, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 452:	10 e0       	ldi	r17, 0x00	; 0
    			r = 0x00;
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	01 c0       	rjmp	.+2      	; 0x45a <setColor_RGB+0xa0>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 458:	40 e0       	ldi	r20, 0x00	; 0
    			r = 0x00;
    			b = 0x00;
			}
		}

		uint8_t *p = &cells[n * 3];
 45a:	9c 01       	movw	r18, r24
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	28 0f       	add	r18, r24
 462:	39 1f       	adc	r19, r25
 464:	e0 91 12 01 	lds	r30, 0x0112
 468:	f0 91 13 01 	lds	r31, 0x0113
 46c:	e2 0f       	add	r30, r18
 46e:	f3 1f       	adc	r31, r19

		*p++ = g;
 470:	df 01       	movw	r26, r30
 472:	1d 93       	st	X+, r17
		*p++ = r;
 474:	61 83       	std	Z+1, r22	; 0x01
		*p = b;
 476:	11 96       	adiw	r26, 0x01	; 1
 478:	4c 93       	st	X, r20
 47a:	11 97       	sbiw	r26, 0x01	; 1
	}
}
 47c:	1f 91       	pop	r17
 47e:	08 95       	ret

00000480 <show>:


void show(void)
{
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	27 97       	sbiw	r28, 0x07	; 7
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
	rst_delay();								// 50us Delay
 494:	0e 94 56 01 	call	0x2ac	; 0x2ac <rst_delay>
	asm volatile("cli");						// interrupt Disable
 498:	f8 94       	cli

	volatile uint16_t loopcnt_i = nBytes;		// loop counter : led * 3 byte
 49a:	80 91 0c 01 	lds	r24, 0x010C
 49e:	90 91 0d 01 	lds	r25, 0x010D
 4a2:	9f 83       	std	Y+7, r25	; 0x07
 4a4:	8e 83       	std	Y+6, r24	; 0x06

	volatile uint8_t
		*ptr = cells,
		curbyte = *ptr++;
 4a6:	a0 91 12 01 	lds	r26, 0x0112
 4aa:	b0 91 13 01 	lds	r27, 0x0113
 4ae:	8d 91       	ld	r24, X+
 4b0:	89 83       	std	Y+1, r24	; 0x01

	volatile uint8_t next, bit, high, low;

	high = *port | maskPin;
 4b2:	e0 91 10 01 	lds	r30, 0x0110
 4b6:	f0 91 11 01 	lds	r31, 0x0111
 4ba:	80 81       	ld	r24, Z
 4bc:	90 91 14 01 	lds	r25, 0x0114
 4c0:	89 2b       	or	r24, r25
 4c2:	8c 83       	std	Y+4, r24	; 0x04
	low = *port & ~maskPin;
 4c4:	90 81       	ld	r25, Z
 4c6:	80 91 14 01 	lds	r24, 0x0114
 4ca:	80 95       	com	r24
 4cc:	89 23       	and	r24, r25
 4ce:	8d 83       	std	Y+5, r24	; 0x05

	next = low;
 4d0:	8d 81       	ldd	r24, Y+5	; 0x05
 4d2:	8a 83       	std	Y+2, r24	; 0x02
	bit = 8;
 4d4:	88 e0       	ldi	r24, 0x08	; 8
 4d6:	8b 83       	std	Y+3, r24	; 0x03

	asm volatile(
 4d8:	5c 81       	ldd	r21, Y+4	; 0x04
 4da:	6d 81       	ldd	r22, Y+5	; 0x05
 4dc:	49 81       	ldd	r20, Y+1	; 0x01
 4de:	3b 81       	ldd	r19, Y+3	; 0x03
 4e0:	2a 81       	ldd	r18, Y+2	; 0x02
 4e2:	8e 81       	ldd	r24, Y+6	; 0x06
 4e4:	9f 81       	ldd	r25, Y+7	; 0x07

000004e6 <run>:
 4e6:	50 83       	st	Z, r21
 4e8:	47 fd       	sbrc	r20, 7
 4ea:	25 2f       	mov	r18, r21
 4ec:	20 83       	st	Z, r18
 4ee:	26 2f       	mov	r18, r22
 4f0:	3a 95       	dec	r19
 4f2:	39 f0       	breq	.+14     	; 0x502 <nextByte>
 4f4:	44 0f       	add	r20, r20
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <run+0x12>
 4f8:	00 00       	nop
 4fa:	60 83       	st	Z, r22
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <run+0x18>
 4fe:	00 00       	nop
 500:	f2 cf       	rjmp	.-28     	; 0x4e6 <run>

00000502 <nextByte>:
 502:	4d 91       	ld	r20, X+
 504:	60 83       	st	Z, r22
 506:	38 e0       	ldi	r19, 0x08	; 8
 508:	00 00       	nop
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	61 f7       	brne	.-40     	; 0x4e6 <run>
 50e:	f0 93 11 01 	sts	0x0111, r31
 512:	e0 93 10 01 	sts	0x0110, r30
 516:	49 83       	std	Y+1, r20	; 0x01
 518:	3b 83       	std	Y+3, r19	; 0x03
 51a:	2a 83       	std	Y+2, r18	; 0x02
 51c:	9f 83       	std	Y+7, r25	; 0x07
 51e:	8e 83       	std	Y+6, r24	; 0x06
		[count] "+w" (loopcnt_i)
		: [ptr]   "e"  (ptr),
		[high]  "r"  (high),
		[low]   "r"  (low));

	asm volatile("sei");						// interrupt Enable
 520:	78 94       	sei
	rst_delay();								// 50us Delay	
 522:	0e 94 56 01 	call	0x2ac	; 0x2ac <rst_delay>
}
 526:	27 96       	adiw	r28, 0x07	; 7
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	08 95       	ret

00000538 <NS_Rainbow_init>:
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}


// Initializer Func
void NS_Rainbow_init(uint16_t _numled, volatile uint8_t _port, uint8_t _outbit)
{
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	df 93       	push	r29
 53e:	cf 93       	push	r28
 540:	00 d0       	rcall	.+0      	; 0x542 <NS_Rainbow_init+0xa>
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	8c 01       	movw	r16, r24
 548:	69 83       	std	Y+1, r22	; 0x01
	setPin(_port, _outbit);
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	64 2f       	mov	r22, r20
 54e:	4a 83       	std	Y+2, r20	; 0x02
 550:	0e 94 6d 01 	call	0x2da	; 0x2da <setPin>
	port = (volatile uint8_t *)_port;
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	80 93 10 01 	sts	0x0110, r24
 55a:	10 92 11 01 	sts	0x0111, r1
	maskPin = ( 1 << _outbit );
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	4a 81       	ldd	r20, Y+2	; 0x02
 564:	02 c0       	rjmp	.+4      	; 0x56a <NS_Rainbow_init+0x32>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	4a 95       	dec	r20
 56c:	e2 f7       	brpl	.-8      	; 0x566 <NS_Rainbow_init+0x2e>
 56e:	80 93 14 01 	sts	0x0114, r24
	
	nCells		= _numled;
 572:	10 93 0f 01 	sts	0x010F, r17
 576:	00 93 0e 01 	sts	0x010E, r16
	nBytes		= maxLEDBytes;
 57a:	80 91 02 01 	lds	r24, 0x0102
 57e:	90 91 03 01 	lds	r25, 0x0103
 582:	90 93 0d 01 	sts	0x010D, r25
 586:	80 93 0c 01 	sts	0x010C, r24

	brightness = DEFALUT_BRIGHT;						
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	80 93 04 01 	sts	0x0104, r24
		
	if(cells = (uint8_t *)malloc(nBytes))		// MAXLED(Default=64) Size LED Clear
 590:	80 91 0c 01 	lds	r24, 0x010C
 594:	90 91 0d 01 	lds	r25, 0x010D
 598:	0e 94 0e 05 	call	0xa1c	; 0xa1c <malloc>
 59c:	90 93 13 01 	sts	0x0113, r25
 5a0:	80 93 12 01 	sts	0x0112, r24
 5a4:	00 97       	sbiw	r24, 0x00	; 0
 5a6:	49 f0       	breq	.+18     	; 0x5ba <NS_Rainbow_init+0x82>
		memset(cells, 0, nBytes);
 5a8:	20 91 0c 01 	lds	r18, 0x010C
 5ac:	30 91 0d 01 	lds	r19, 0x010D
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	a9 01       	movw	r20, r18
 5b6:	0e 94 41 06 	call	0xc82	; 0xc82 <memset>
	show();
 5ba:	0e 94 40 02 	call	0x480	; 0x480 <show>
	free(cells);
 5be:	80 91 12 01 	lds	r24, 0x0112
 5c2:	90 91 13 01 	lds	r25, 0x0113
 5c6:	0e 94 a8 05 	call	0xb50	; 0xb50 <free>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	90 e7       	ldi	r25, 0x70	; 112
 5ce:	a2 e0       	ldi	r26, 0x02	; 2
 5d0:	81 50       	subi	r24, 0x01	; 1
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	a0 40       	sbci	r26, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <NS_Rainbow_init+0x98>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <NS_Rainbow_init+0xa2>
 5da:	00 00       	nop
	_delay_ms(50);								// Stabilizer Delay

	nBytes = _numled * 3;
 5dc:	c8 01       	movw	r24, r16
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	80 0f       	add	r24, r16
 5e4:	91 1f       	adc	r25, r17
 5e6:	90 93 0d 01 	sts	0x010D, r25
 5ea:	80 93 0c 01 	sts	0x010C, r24
	if(cells = (uint8_t *)malloc(nBytes))
 5ee:	80 91 0c 01 	lds	r24, 0x010C
 5f2:	90 91 0d 01 	lds	r25, 0x010D
 5f6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <malloc>
 5fa:	90 93 13 01 	sts	0x0113, r25
 5fe:	80 93 12 01 	sts	0x0112, r24
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	49 f0       	breq	.+18     	; 0x618 <NS_Rainbow_init+0xe0>
		memset(cells, 0, nBytes);
 606:	20 91 0c 01 	lds	r18, 0x010C
 60a:	30 91 0d 01 	lds	r19, 0x010D
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	a9 01       	movw	r20, r18
 614:	0e 94 41 06 	call	0xc82	; 0xc82 <memset>
	
}
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	08 95       	ret

00000626 <clear>:
}


void clear(void)
{
	memset(cells, 0, nBytes);
 626:	20 91 0c 01 	lds	r18, 0x010C
 62a:	30 91 0d 01 	lds	r19, 0x010D
 62e:	80 91 12 01 	lds	r24, 0x0112
 632:	90 91 13 01 	lds	r25, 0x0113
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	a9 01       	movw	r20, r18
 63c:	0e 94 41 06 	call	0xc82	; 0xc82 <memset>
	show();
 640:	0e 94 40 02 	call	0x480	; 0x480 <show>
}
 644:	08 95       	ret

00000646 <cell_clear>:


void cell_clear(uint16_t nCell)
{
	setColor(nCell, 0, 0, 0);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setColor>
	show();
 650:	0e 94 40 02 	call	0x480	; 0x480 <show>
}
 654:	08 95       	ret

00000656 <setBrightness>:



void setBrightness(uint8_t b)
{
 656:	4f 92       	push	r4
 658:	5f 92       	push	r5
 65a:	6f 92       	push	r6
 65c:	7f 92       	push	r7
 65e:	8f 92       	push	r8
 660:	9f 92       	push	r9
 662:	af 92       	push	r10
 664:	bf 92       	push	r11
 666:	cf 92       	push	r12
 668:	df 92       	push	r13
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	18 2f       	mov	r17, r24
	if( b != brightness )
 676:	80 91 04 01 	lds	r24, 0x0104
 67a:	18 17       	cp	r17, r24
 67c:	09 f4       	brne	.+2      	; 0x680 <setBrightness+0x2a>
 67e:	b0 c0       	rjmp	.+352    	; 0x7e0 <setBrightness+0x18a>
	{
		uint8_t *ptr = cells;
 680:	30 91 12 01 	lds	r19, 0x0112
 684:	20 91 13 01 	lds	r18, 0x0113
		uint16_t nb = b + 1, cb = brightness + 1;
 688:	41 2e       	mov	r4, r17
 68a:	55 24       	eor	r5, r5
 68c:	08 94       	sec
 68e:	41 1c       	adc	r4, r1
 690:	51 1c       	adc	r5, r1
 692:	80 91 04 01 	lds	r24, 0x0104
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	01 96       	adiw	r24, 0x01	; 1
	
		if (b < 1)
 69a:	11 23       	and	r17, r17
 69c:	99 f5       	brne	.+102    	; 0x704 <setBrightness+0xae>
 69e:	a9 01       	movw	r20, r18
 6a0:	e5 2e       	mov	r14, r21
 6a2:	e7 01       	movw	r28, r14
 6a4:	7e 01       	movw	r14, r28
 6a6:	f2 2e       	mov	r15, r18
 6a8:	e7 01       	movw	r28, r14
 6aa:	67 01       	movw	r12, r14
 6ac:	ee 24       	eor	r14, r14
 6ae:	ff 24       	eor	r15, r15
		{
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 6b0:	4c 01       	movw	r8, r24
 6b2:	aa 24       	eor	r10, r10
 6b4:	bb 24       	eor	r11, r11
 6b6:	1e c0       	rjmp	.+60     	; 0x6f4 <setBrightness+0x9e>
 6b8:	f6 01       	movw	r30, r12
 6ba:	61 91       	ld	r22, Z+
 6bc:	6f 01       	movw	r12, r30
 6be:	66 23       	and	r22, r22
 6c0:	a1 f0       	breq	.+40     	; 0x6ea <setBrightness+0x94>
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	6f 5f       	subi	r22, 0xFF	; 255
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	88 27       	eor	r24, r24
 6ca:	77 fd       	sbrc	r23, 7
 6cc:	80 95       	com	r24
 6ce:	98 2f       	mov	r25, r24
 6d0:	cb 01       	movw	r24, r22
 6d2:	77 27       	eor	r23, r23
 6d4:	66 27       	eor	r22, r22
 6d6:	a5 01       	movw	r20, r10
 6d8:	94 01       	movw	r18, r8
 6da:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodsi4>
 6de:	20 58       	subi	r18, 0x80	; 128
 6e0:	30 40       	sbci	r19, 0x00	; 0
 6e2:	40 40       	sbci	r20, 0x00	; 0
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	38 83       	st	Y, r19
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <setBrightness+0x96>
 6ea:	18 82       	st	Y, r1
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
	
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
 6ec:	08 94       	sec
 6ee:	e1 1c       	adc	r14, r1
 6f0:	f1 1c       	adc	r15, r1
 6f2:	21 96       	adiw	r28, 0x01	; 1
 6f4:	80 91 0c 01 	lds	r24, 0x010C
 6f8:	90 91 0d 01 	lds	r25, 0x010D
 6fc:	e8 16       	cp	r14, r24
 6fe:	f9 06       	cpc	r15, r25
 700:	d8 f2       	brcs	.-74     	; 0x6b8 <setBrightness+0x62>
 702:	6c c0       	rjmp	.+216    	; 0x7dc <setBrightness+0x186>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 704:	1f 3f       	cpi	r17, 0xFF	; 255
 706:	89 f0       	breq	.+34     	; 0x72a <setBrightness+0xd4>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 708:	54 2c       	mov	r5, r4
 70a:	44 24       	eor	r4, r4
 70c:	66 24       	eor	r6, r6
 70e:	77 24       	eor	r7, r7
 710:	a9 01       	movw	r20, r18
 712:	e5 2e       	mov	r14, r21
 714:	e7 01       	movw	r28, r14
 716:	7e 01       	movw	r14, r28
 718:	f4 2e       	mov	r15, r20
 71a:	e7 01       	movw	r28, r14
 71c:	67 01       	movw	r12, r14
 71e:	ee 24       	eor	r14, r14
 720:	ff 24       	eor	r15, r15
 722:	4c 01       	movw	r8, r24
 724:	aa 24       	eor	r10, r10
 726:	bb 24       	eor	r11, r11
 728:	52 c0       	rjmp	.+164    	; 0x7ce <setBrightness+0x178>
 72a:	a9 01       	movw	r20, r18
 72c:	e5 2f       	mov	r30, r21
 72e:	ef 01       	movw	r28, r30
 730:	7e 01       	movw	r14, r28
 732:	f4 2e       	mov	r15, r20
 734:	e7 01       	movw	r28, r14
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 736:	67 01       	movw	r12, r14
 738:	ee 24       	eor	r14, r14
 73a:	ff 24       	eor	r15, r15
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 73c:	4c 01       	movw	r8, r24
 73e:	aa 24       	eor	r10, r10
 740:	bb 24       	eor	r11, r11
 742:	1e c0       	rjmp	.+60     	; 0x780 <setBrightness+0x12a>
 744:	f6 01       	movw	r30, r12
 746:	61 91       	ld	r22, Z+
 748:	6f 01       	movw	r12, r30
 74a:	66 23       	and	r22, r22
 74c:	a1 f0       	breq	.+40     	; 0x776 <setBrightness+0x120>
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	6f 5f       	subi	r22, 0xFF	; 255
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	88 27       	eor	r24, r24
 756:	77 fd       	sbrc	r23, 7
 758:	80 95       	com	r24
 75a:	98 2f       	mov	r25, r24
 75c:	cb 01       	movw	r24, r22
 75e:	77 27       	eor	r23, r23
 760:	66 27       	eor	r22, r22
 762:	a5 01       	movw	r20, r10
 764:	94 01       	movw	r18, r8
 766:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodsi4>
 76a:	20 58       	subi	r18, 0x80	; 128
 76c:	30 40       	sbci	r19, 0x00	; 0
 76e:	40 40       	sbci	r20, 0x00	; 0
 770:	50 40       	sbci	r21, 0x00	; 0
 772:	38 83       	st	Y, r19
 774:	01 c0       	rjmp	.+2      	; 0x778 <setBrightness+0x122>
 776:	18 82       	st	Y, r1
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 778:	08 94       	sec
 77a:	e1 1c       	adc	r14, r1
 77c:	f1 1c       	adc	r15, r1
 77e:	21 96       	adiw	r28, 0x01	; 1
 780:	80 91 0c 01 	lds	r24, 0x010C
 784:	90 91 0d 01 	lds	r25, 0x010D
 788:	e8 16       	cp	r14, r24
 78a:	f9 06       	cpc	r15, r25
 78c:	d8 f2       	brcs	.-74     	; 0x744 <setBrightness+0xee>
 78e:	26 c0       	rjmp	.+76     	; 0x7dc <setBrightness+0x186>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 790:	f6 01       	movw	r30, r12
 792:	21 91       	ld	r18, Z+
 794:	6f 01       	movw	r12, r30
 796:	22 23       	and	r18, r18
 798:	a9 f0       	breq	.+42     	; 0x7c4 <setBrightness+0x16e>
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	2f 5f       	subi	r18, 0xFF	; 255
 79e:	3f 4f       	sbci	r19, 0xFF	; 255
 7a0:	44 27       	eor	r20, r20
 7a2:	37 fd       	sbrc	r19, 7
 7a4:	40 95       	com	r20
 7a6:	54 2f       	mov	r21, r20
 7a8:	c3 01       	movw	r24, r6
 7aa:	b2 01       	movw	r22, r4
 7ac:	0e 94 ad 04 	call	0x95a	; 0x95a <__mulsi3>
 7b0:	a5 01       	movw	r20, r10
 7b2:	94 01       	movw	r18, r8
 7b4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodsi4>
 7b8:	20 58       	subi	r18, 0x80	; 128
 7ba:	30 40       	sbci	r19, 0x00	; 0
 7bc:	40 40       	sbci	r20, 0x00	; 0
 7be:	50 40       	sbci	r21, 0x00	; 0
 7c0:	38 83       	st	Y, r19
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <setBrightness+0x170>
 7c4:	18 82       	st	Y, r1
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 7c6:	08 94       	sec
 7c8:	e1 1c       	adc	r14, r1
 7ca:	f1 1c       	adc	r15, r1
 7cc:	21 96       	adiw	r28, 0x01	; 1
 7ce:	80 91 0c 01 	lds	r24, 0x010C
 7d2:	90 91 0d 01 	lds	r25, 0x010D
 7d6:	e8 16       	cp	r14, r24
 7d8:	f9 06       	cpc	r15, r25
 7da:	d0 f2       	brcs	.-76     	; 0x790 <setBrightness+0x13a>
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		brightness = b;	
 7dc:	10 93 04 01 	sts	0x0104, r17
	}
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
 7ee:	bf 90       	pop	r11
 7f0:	af 90       	pop	r10
 7f2:	9f 90       	pop	r9
 7f4:	8f 90       	pop	r8
 7f6:	7f 90       	pop	r7
 7f8:	6f 90       	pop	r6
 7fa:	5f 90       	pop	r5
 7fc:	4f 90       	pop	r4
 7fe:	08 95       	ret

00000800 <RGBtoColor>:


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
 800:	ef 92       	push	r14
 802:	ff 92       	push	r15
 804:	0f 93       	push	r16
 806:	1f 93       	push	r17
 808:	e4 2e       	mov	r14, r20
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 80a:	26 2f       	mov	r18, r22
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	54 2f       	mov	r21, r20
 814:	43 2f       	mov	r20, r19
 816:	32 2f       	mov	r19, r18
 818:	22 27       	eor	r18, r18
 81a:	ff 24       	eor	r15, r15
 81c:	00 e0       	ldi	r16, 0x00	; 0
 81e:	10 e0       	ldi	r17, 0x00	; 0
 820:	2e 29       	or	r18, r14
 822:	3f 29       	or	r19, r15
 824:	40 2b       	or	r20, r16
 826:	51 2b       	or	r21, r17
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	a0 e0       	ldi	r26, 0x00	; 0
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	dc 01       	movw	r26, r24
 830:	99 27       	eor	r25, r25
 832:	88 27       	eor	r24, r24
 834:	28 2b       	or	r18, r24
 836:	39 2b       	or	r19, r25
 838:	4a 2b       	or	r20, r26
 83a:	5b 2b       	or	r21, r27
}
 83c:	b9 01       	movw	r22, r18
 83e:	ca 01       	movw	r24, r20
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	08 95       	ret

0000084a <rainbow>:



void rainbow(uint16_t interval)
{
 84a:	6f 92       	push	r6
 84c:	7f 92       	push	r7
 84e:	8f 92       	push	r8
 850:	9f 92       	push	r9
 852:	af 92       	push	r10
 854:	bf 92       	push	r11
 856:	cf 92       	push	r12
 858:	df 92       	push	r13
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
	uint16_t n = nCells;
 866:	e0 90 0e 01 	lds	r14, 0x010E
 86a:	f0 90 0f 01 	lds	r15, 0x010F

	for(uint16_t j=0; j<255; j++) 
 86e:	00 e0       	ldi	r16, 0x00	; 0
 870:	10 e0       	ldi	r17, 0x00	; 0
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
		{
			uint8_t r_pos = (((i<<8) -  i) / n + j) % 0xFF;
 872:	3f ef       	ldi	r19, 0xFF	; 255
 874:	83 2e       	mov	r8, r19
 876:	91 2c       	mov	r9, r1
			uint8_t sect = (r_pos / 0x55) % 0x03, pos = (r_pos % 0x55) * 0x03;
 878:	25 e5       	ldi	r18, 0x55	; 85
 87a:	72 2e       	mov	r7, r18
 87c:	b3 e0       	ldi	r27, 0x03	; 3
 87e:	6b 2e       	mov	r6, r27
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
			}  
		}
	
		show();
		delay(interval);
 880:	5c 01       	movw	r10, r24
 882:	cc 24       	eor	r12, r12
 884:	dd 24       	eor	r13, r13
 886:	57 c0       	rjmp	.+174    	; 0x936 <__stack+0x37>

	for(uint16_t j=0; j<255; j++) 
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
		{
			uint8_t r_pos = (((i<<8) -  i) / n + j) % 0xFF;
 888:	9c 2f       	mov	r25, r28
 88a:	88 27       	eor	r24, r24
 88c:	8c 1b       	sub	r24, r28
 88e:	9d 0b       	sbc	r25, r29
 890:	b7 01       	movw	r22, r14
 892:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__udivmodhi4>
 896:	60 0f       	add	r22, r16
 898:	71 1f       	adc	r23, r17
 89a:	cb 01       	movw	r24, r22
 89c:	b4 01       	movw	r22, r8
 89e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__udivmodhi4>
			uint8_t sect = (r_pos / 0x55) % 0x03, pos = (r_pos % 0x55) * 0x03;
 8a2:	67 2d       	mov	r22, r7
 8a4:	0e 94 cc 04 	call	0x998	; 0x998 <__udivmodqi4>
 8a8:	29 2f       	mov	r18, r25
 8aa:	22 0f       	add	r18, r18
 8ac:	29 0f       	add	r18, r25
 8ae:	66 2d       	mov	r22, r6
 8b0:	0e 94 cc 04 	call	0x998	; 0x998 <__udivmodqi4>
 8b4:	39 2f       	mov	r19, r25

			switch(sect) 
 8b6:	91 30       	cpi	r25, 0x01	; 1
 8b8:	99 f0       	breq	.+38     	; 0x8e0 <rainbow+0x96>
 8ba:	42 2f       	mov	r20, r18
 8bc:	40 95       	com	r20
 8be:	82 2f       	mov	r24, r18
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	a0 e0       	ldi	r26, 0x00	; 0
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	32 30       	cpi	r19, 0x02	; 2
 8c8:	c9 f0       	breq	.+50     	; 0x8fc <rainbow+0xb2>
}


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	ba 01       	movw	r22, r20
 8d2:	55 27       	eor	r21, r21
 8d4:	44 27       	eor	r20, r20
 8d6:	ba 2f       	mov	r27, r26
 8d8:	a9 2f       	mov	r26, r25
 8da:	98 2f       	mov	r25, r24
 8dc:	88 27       	eor	r24, r24
 8de:	14 c0       	rjmp	.+40     	; 0x908 <__stack+0x9>
			{
				case 0: 
					setColor_RGB(i, RGBtoColor(0xFF - pos, pos, 0x00)); break;

				case 1: 
					setColor_RGB(i, RGBtoColor(0x00, 0xFF - pos, pos)); break;
 8e0:	42 2f       	mov	r20, r18
 8e2:	40 95       	com	r20
}


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	76 2f       	mov	r23, r22
 8ec:	65 2f       	mov	r22, r21
 8ee:	54 2f       	mov	r21, r20
 8f0:	44 27       	eor	r20, r20
 8f2:	82 2f       	mov	r24, r18
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	a0 e0       	ldi	r26, 0x00	; 0
 8f8:	b0 e0       	ldi	r27, 0x00	; 0
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <__stack+0x9>
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	dc 01       	movw	r26, r24
 904:	99 27       	eor	r25, r25
 906:	88 27       	eor	r24, r24
 908:	48 2b       	or	r20, r24
 90a:	59 2b       	or	r21, r25
 90c:	6a 2b       	or	r22, r26
 90e:	7b 2b       	or	r23, r27

				case 1: 
					setColor_RGB(i, RGBtoColor(0x00, 0xFF - pos, pos)); break;

				case 2:
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
 910:	ce 01       	movw	r24, r28
 912:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setColor_RGB>
{
	uint16_t n = nCells;

	for(uint16_t j=0; j<255; j++) 
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
 916:	21 96       	adiw	r28, 0x01	; 1
 918:	ce 15       	cp	r28, r14
 91a:	df 05       	cpc	r29, r15
 91c:	08 f4       	brcc	.+2      	; 0x920 <__stack+0x21>
 91e:	b4 cf       	rjmp	.-152    	; 0x888 <rainbow+0x3e>
				case 2:
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
			}  
		}
	
		show();
 920:	0e 94 40 02 	call	0x480	; 0x480 <show>
		delay(interval);
 924:	c6 01       	movw	r24, r12
 926:	b5 01       	movw	r22, r10
 928:	0e 94 5d 01 	call	0x2ba	; 0x2ba <delay>

void rainbow(uint16_t interval)
{
	uint16_t n = nCells;

	for(uint16_t j=0; j<255; j++) 
 92c:	0f 5f       	subi	r16, 0xFF	; 255
 92e:	1f 4f       	sbci	r17, 0xFF	; 255
 930:	0f 3f       	cpi	r16, 0xFF	; 255
 932:	11 05       	cpc	r17, r1
 934:	19 f0       	breq	.+6      	; 0x93c <__stack+0x3d>
}



void rainbow(uint16_t interval)
{
 936:	c0 e0       	ldi	r28, 0x00	; 0
 938:	d0 e0       	ldi	r29, 0x00	; 0
 93a:	ee cf       	rjmp	.-36     	; 0x918 <__stack+0x19>
		}
	
		show();
		delay(interval);
	}
}
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	bf 90       	pop	r11
 94e:	af 90       	pop	r10
 950:	9f 90       	pop	r9
 952:	8f 90       	pop	r8
 954:	7f 90       	pop	r7
 956:	6f 90       	pop	r6
 958:	08 95       	ret

0000095a <__mulsi3>:
 95a:	62 9f       	mul	r22, r18
 95c:	d0 01       	movw	r26, r0
 95e:	73 9f       	mul	r23, r19
 960:	f0 01       	movw	r30, r0
 962:	82 9f       	mul	r24, r18
 964:	e0 0d       	add	r30, r0
 966:	f1 1d       	adc	r31, r1
 968:	64 9f       	mul	r22, r20
 96a:	e0 0d       	add	r30, r0
 96c:	f1 1d       	adc	r31, r1
 96e:	92 9f       	mul	r25, r18
 970:	f0 0d       	add	r31, r0
 972:	83 9f       	mul	r24, r19
 974:	f0 0d       	add	r31, r0
 976:	74 9f       	mul	r23, r20
 978:	f0 0d       	add	r31, r0
 97a:	65 9f       	mul	r22, r21
 97c:	f0 0d       	add	r31, r0
 97e:	99 27       	eor	r25, r25
 980:	72 9f       	mul	r23, r18
 982:	b0 0d       	add	r27, r0
 984:	e1 1d       	adc	r30, r1
 986:	f9 1f       	adc	r31, r25
 988:	63 9f       	mul	r22, r19
 98a:	b0 0d       	add	r27, r0
 98c:	e1 1d       	adc	r30, r1
 98e:	f9 1f       	adc	r31, r25
 990:	bd 01       	movw	r22, r26
 992:	cf 01       	movw	r24, r30
 994:	11 24       	eor	r1, r1
 996:	08 95       	ret

00000998 <__udivmodqi4>:
 998:	99 1b       	sub	r25, r25
 99a:	79 e0       	ldi	r23, 0x09	; 9
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__udivmodqi4_ep>

0000099e <__udivmodqi4_loop>:
 99e:	99 1f       	adc	r25, r25
 9a0:	96 17       	cp	r25, r22
 9a2:	08 f0       	brcs	.+2      	; 0x9a6 <__udivmodqi4_ep>
 9a4:	96 1b       	sub	r25, r22

000009a6 <__udivmodqi4_ep>:
 9a6:	88 1f       	adc	r24, r24
 9a8:	7a 95       	dec	r23
 9aa:	c9 f7       	brne	.-14     	; 0x99e <__udivmodqi4_loop>
 9ac:	80 95       	com	r24
 9ae:	08 95       	ret

000009b0 <__udivmodhi4>:
 9b0:	aa 1b       	sub	r26, r26
 9b2:	bb 1b       	sub	r27, r27
 9b4:	51 e1       	ldi	r21, 0x11	; 17
 9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <__udivmodhi4_ep>

000009b8 <__udivmodhi4_loop>:
 9b8:	aa 1f       	adc	r26, r26
 9ba:	bb 1f       	adc	r27, r27
 9bc:	a6 17       	cp	r26, r22
 9be:	b7 07       	cpc	r27, r23
 9c0:	10 f0       	brcs	.+4      	; 0x9c6 <__udivmodhi4_ep>
 9c2:	a6 1b       	sub	r26, r22
 9c4:	b7 0b       	sbc	r27, r23

000009c6 <__udivmodhi4_ep>:
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	5a 95       	dec	r21
 9cc:	a9 f7       	brne	.-22     	; 0x9b8 <__udivmodhi4_loop>
 9ce:	80 95       	com	r24
 9d0:	90 95       	com	r25
 9d2:	bc 01       	movw	r22, r24
 9d4:	cd 01       	movw	r24, r26
 9d6:	08 95       	ret

000009d8 <__udivmodsi4>:
 9d8:	a1 e2       	ldi	r26, 0x21	; 33
 9da:	1a 2e       	mov	r1, r26
 9dc:	aa 1b       	sub	r26, r26
 9de:	bb 1b       	sub	r27, r27
 9e0:	fd 01       	movw	r30, r26
 9e2:	0d c0       	rjmp	.+26     	; 0x9fe <__udivmodsi4_ep>

000009e4 <__udivmodsi4_loop>:
 9e4:	aa 1f       	adc	r26, r26
 9e6:	bb 1f       	adc	r27, r27
 9e8:	ee 1f       	adc	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	a2 17       	cp	r26, r18
 9ee:	b3 07       	cpc	r27, r19
 9f0:	e4 07       	cpc	r30, r20
 9f2:	f5 07       	cpc	r31, r21
 9f4:	20 f0       	brcs	.+8      	; 0x9fe <__udivmodsi4_ep>
 9f6:	a2 1b       	sub	r26, r18
 9f8:	b3 0b       	sbc	r27, r19
 9fa:	e4 0b       	sbc	r30, r20
 9fc:	f5 0b       	sbc	r31, r21

000009fe <__udivmodsi4_ep>:
 9fe:	66 1f       	adc	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	1a 94       	dec	r1
 a08:	69 f7       	brne	.-38     	; 0x9e4 <__udivmodsi4_loop>
 a0a:	60 95       	com	r22
 a0c:	70 95       	com	r23
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	9b 01       	movw	r18, r22
 a14:	ac 01       	movw	r20, r24
 a16:	bd 01       	movw	r22, r26
 a18:	cf 01       	movw	r24, r30
 a1a:	08 95       	ret

00000a1c <malloc>:
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	82 30       	cpi	r24, 0x02	; 2
 a22:	91 05       	cpc	r25, r1
 a24:	10 f4       	brcc	.+4      	; 0xa2a <malloc+0xe>
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	e0 91 17 01 	lds	r30, 0x0117
 a2e:	f0 91 18 01 	lds	r31, 0x0118
 a32:	40 e0       	ldi	r20, 0x00	; 0
 a34:	50 e0       	ldi	r21, 0x00	; 0
 a36:	20 e0       	ldi	r18, 0x00	; 0
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	26 c0       	rjmp	.+76     	; 0xa88 <malloc+0x6c>
 a3c:	60 81       	ld	r22, Z
 a3e:	71 81       	ldd	r23, Z+1	; 0x01
 a40:	68 17       	cp	r22, r24
 a42:	79 07       	cpc	r23, r25
 a44:	e0 f0       	brcs	.+56     	; 0xa7e <malloc+0x62>
 a46:	68 17       	cp	r22, r24
 a48:	79 07       	cpc	r23, r25
 a4a:	81 f4       	brne	.+32     	; 0xa6c <malloc+0x50>
 a4c:	82 81       	ldd	r24, Z+2	; 0x02
 a4e:	93 81       	ldd	r25, Z+3	; 0x03
 a50:	21 15       	cp	r18, r1
 a52:	31 05       	cpc	r19, r1
 a54:	31 f0       	breq	.+12     	; 0xa62 <malloc+0x46>
 a56:	d9 01       	movw	r26, r18
 a58:	13 96       	adiw	r26, 0x03	; 3
 a5a:	9c 93       	st	X, r25
 a5c:	8e 93       	st	-X, r24
 a5e:	12 97       	sbiw	r26, 0x02	; 2
 a60:	2b c0       	rjmp	.+86     	; 0xab8 <malloc+0x9c>
 a62:	90 93 18 01 	sts	0x0118, r25
 a66:	80 93 17 01 	sts	0x0117, r24
 a6a:	26 c0       	rjmp	.+76     	; 0xab8 <malloc+0x9c>
 a6c:	41 15       	cp	r20, r1
 a6e:	51 05       	cpc	r21, r1
 a70:	19 f0       	breq	.+6      	; 0xa78 <malloc+0x5c>
 a72:	64 17       	cp	r22, r20
 a74:	75 07       	cpc	r23, r21
 a76:	18 f4       	brcc	.+6      	; 0xa7e <malloc+0x62>
 a78:	ab 01       	movw	r20, r22
 a7a:	e9 01       	movw	r28, r18
 a7c:	df 01       	movw	r26, r30
 a7e:	9f 01       	movw	r18, r30
 a80:	72 81       	ldd	r23, Z+2	; 0x02
 a82:	63 81       	ldd	r22, Z+3	; 0x03
 a84:	e7 2f       	mov	r30, r23
 a86:	f6 2f       	mov	r31, r22
 a88:	30 97       	sbiw	r30, 0x00	; 0
 a8a:	c1 f6       	brne	.-80     	; 0xa3c <malloc+0x20>
 a8c:	41 15       	cp	r20, r1
 a8e:	51 05       	cpc	r21, r1
 a90:	01 f1       	breq	.+64     	; 0xad2 <malloc+0xb6>
 a92:	48 1b       	sub	r20, r24
 a94:	59 0b       	sbc	r21, r25
 a96:	44 30       	cpi	r20, 0x04	; 4
 a98:	51 05       	cpc	r21, r1
 a9a:	80 f4       	brcc	.+32     	; 0xabc <malloc+0xa0>
 a9c:	12 96       	adiw	r26, 0x02	; 2
 a9e:	8d 91       	ld	r24, X+
 aa0:	9c 91       	ld	r25, X
 aa2:	13 97       	sbiw	r26, 0x03	; 3
 aa4:	20 97       	sbiw	r28, 0x00	; 0
 aa6:	19 f0       	breq	.+6      	; 0xaae <malloc+0x92>
 aa8:	9b 83       	std	Y+3, r25	; 0x03
 aaa:	8a 83       	std	Y+2, r24	; 0x02
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <malloc+0x9a>
 aae:	90 93 18 01 	sts	0x0118, r25
 ab2:	80 93 17 01 	sts	0x0117, r24
 ab6:	fd 01       	movw	r30, r26
 ab8:	32 96       	adiw	r30, 0x02	; 2
 aba:	46 c0       	rjmp	.+140    	; 0xb48 <malloc+0x12c>
 abc:	fd 01       	movw	r30, r26
 abe:	e4 0f       	add	r30, r20
 ac0:	f5 1f       	adc	r31, r21
 ac2:	81 93       	st	Z+, r24
 ac4:	91 93       	st	Z+, r25
 ac6:	42 50       	subi	r20, 0x02	; 2
 ac8:	50 40       	sbci	r21, 0x00	; 0
 aca:	11 96       	adiw	r26, 0x01	; 1
 acc:	5c 93       	st	X, r21
 ace:	4e 93       	st	-X, r20
 ad0:	3b c0       	rjmp	.+118    	; 0xb48 <malloc+0x12c>
 ad2:	20 91 15 01 	lds	r18, 0x0115
 ad6:	30 91 16 01 	lds	r19, 0x0116
 ada:	21 15       	cp	r18, r1
 adc:	31 05       	cpc	r19, r1
 ade:	41 f4       	brne	.+16     	; 0xaf0 <malloc+0xd4>
 ae0:	20 91 07 01 	lds	r18, 0x0107
 ae4:	30 91 08 01 	lds	r19, 0x0108
 ae8:	30 93 16 01 	sts	0x0116, r19
 aec:	20 93 15 01 	sts	0x0115, r18
 af0:	20 91 09 01 	lds	r18, 0x0109
 af4:	30 91 0a 01 	lds	r19, 0x010A
 af8:	21 15       	cp	r18, r1
 afa:	31 05       	cpc	r19, r1
 afc:	41 f4       	brne	.+16     	; 0xb0e <malloc+0xf2>
 afe:	2d b7       	in	r18, 0x3d	; 61
 b00:	3e b7       	in	r19, 0x3e	; 62
 b02:	40 91 05 01 	lds	r20, 0x0105
 b06:	50 91 06 01 	lds	r21, 0x0106
 b0a:	24 1b       	sub	r18, r20
 b0c:	35 0b       	sbc	r19, r21
 b0e:	e0 91 15 01 	lds	r30, 0x0115
 b12:	f0 91 16 01 	lds	r31, 0x0116
 b16:	e2 17       	cp	r30, r18
 b18:	f3 07       	cpc	r31, r19
 b1a:	a0 f4       	brcc	.+40     	; 0xb44 <malloc+0x128>
 b1c:	2e 1b       	sub	r18, r30
 b1e:	3f 0b       	sbc	r19, r31
 b20:	28 17       	cp	r18, r24
 b22:	39 07       	cpc	r19, r25
 b24:	78 f0       	brcs	.+30     	; 0xb44 <malloc+0x128>
 b26:	ac 01       	movw	r20, r24
 b28:	4e 5f       	subi	r20, 0xFE	; 254
 b2a:	5f 4f       	sbci	r21, 0xFF	; 255
 b2c:	24 17       	cp	r18, r20
 b2e:	35 07       	cpc	r19, r21
 b30:	48 f0       	brcs	.+18     	; 0xb44 <malloc+0x128>
 b32:	4e 0f       	add	r20, r30
 b34:	5f 1f       	adc	r21, r31
 b36:	50 93 16 01 	sts	0x0116, r21
 b3a:	40 93 15 01 	sts	0x0115, r20
 b3e:	81 93       	st	Z+, r24
 b40:	91 93       	st	Z+, r25
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <malloc+0x12c>
 b44:	e0 e0       	ldi	r30, 0x00	; 0
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	cf 01       	movw	r24, r30
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	08 95       	ret

00000b50 <free>:
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	00 97       	sbiw	r24, 0x00	; 0
 b56:	09 f4       	brne	.+2      	; 0xb5a <free+0xa>
 b58:	91 c0       	rjmp	.+290    	; 0xc7c <free+0x12c>
 b5a:	fc 01       	movw	r30, r24
 b5c:	32 97       	sbiw	r30, 0x02	; 2
 b5e:	13 82       	std	Z+3, r1	; 0x03
 b60:	12 82       	std	Z+2, r1	; 0x02
 b62:	60 91 17 01 	lds	r22, 0x0117
 b66:	70 91 18 01 	lds	r23, 0x0118
 b6a:	61 15       	cp	r22, r1
 b6c:	71 05       	cpc	r23, r1
 b6e:	81 f4       	brne	.+32     	; 0xb90 <free+0x40>
 b70:	20 81       	ld	r18, Z
 b72:	31 81       	ldd	r19, Z+1	; 0x01
 b74:	28 0f       	add	r18, r24
 b76:	39 1f       	adc	r19, r25
 b78:	80 91 15 01 	lds	r24, 0x0115
 b7c:	90 91 16 01 	lds	r25, 0x0116
 b80:	82 17       	cp	r24, r18
 b82:	93 07       	cpc	r25, r19
 b84:	99 f5       	brne	.+102    	; 0xbec <free+0x9c>
 b86:	f0 93 16 01 	sts	0x0116, r31
 b8a:	e0 93 15 01 	sts	0x0115, r30
 b8e:	76 c0       	rjmp	.+236    	; 0xc7c <free+0x12c>
 b90:	db 01       	movw	r26, r22
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <free+0x4c>
 b98:	cd 01       	movw	r24, r26
 b9a:	d9 01       	movw	r26, r18
 b9c:	ae 17       	cp	r26, r30
 b9e:	bf 07       	cpc	r27, r31
 ba0:	48 f4       	brcc	.+18     	; 0xbb4 <free+0x64>
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	2d 91       	ld	r18, X+
 ba6:	3c 91       	ld	r19, X
 ba8:	13 97       	sbiw	r26, 0x03	; 3
 baa:	21 15       	cp	r18, r1
 bac:	31 05       	cpc	r19, r1
 bae:	a1 f7       	brne	.-24     	; 0xb98 <free+0x48>
 bb0:	cd 01       	movw	r24, r26
 bb2:	21 c0       	rjmp	.+66     	; 0xbf6 <free+0xa6>
 bb4:	b3 83       	std	Z+3, r27	; 0x03
 bb6:	a2 83       	std	Z+2, r26	; 0x02
 bb8:	ef 01       	movw	r28, r30
 bba:	49 91       	ld	r20, Y+
 bbc:	59 91       	ld	r21, Y+
 bbe:	9e 01       	movw	r18, r28
 bc0:	24 0f       	add	r18, r20
 bc2:	35 1f       	adc	r19, r21
 bc4:	a2 17       	cp	r26, r18
 bc6:	b3 07       	cpc	r27, r19
 bc8:	79 f4       	brne	.+30     	; 0xbe8 <free+0x98>
 bca:	2d 91       	ld	r18, X+
 bcc:	3c 91       	ld	r19, X
 bce:	11 97       	sbiw	r26, 0x01	; 1
 bd0:	24 0f       	add	r18, r20
 bd2:	35 1f       	adc	r19, r21
 bd4:	2e 5f       	subi	r18, 0xFE	; 254
 bd6:	3f 4f       	sbci	r19, 0xFF	; 255
 bd8:	31 83       	std	Z+1, r19	; 0x01
 bda:	20 83       	st	Z, r18
 bdc:	12 96       	adiw	r26, 0x02	; 2
 bde:	2d 91       	ld	r18, X+
 be0:	3c 91       	ld	r19, X
 be2:	13 97       	sbiw	r26, 0x03	; 3
 be4:	33 83       	std	Z+3, r19	; 0x03
 be6:	22 83       	std	Z+2, r18	; 0x02
 be8:	00 97       	sbiw	r24, 0x00	; 0
 bea:	29 f4       	brne	.+10     	; 0xbf6 <free+0xa6>
 bec:	f0 93 18 01 	sts	0x0118, r31
 bf0:	e0 93 17 01 	sts	0x0117, r30
 bf4:	43 c0       	rjmp	.+134    	; 0xc7c <free+0x12c>
 bf6:	dc 01       	movw	r26, r24
 bf8:	13 96       	adiw	r26, 0x03	; 3
 bfa:	fc 93       	st	X, r31
 bfc:	ee 93       	st	-X, r30
 bfe:	12 97       	sbiw	r26, 0x02	; 2
 c00:	4d 91       	ld	r20, X+
 c02:	5d 91       	ld	r21, X+
 c04:	a4 0f       	add	r26, r20
 c06:	b5 1f       	adc	r27, r21
 c08:	ea 17       	cp	r30, r26
 c0a:	fb 07       	cpc	r31, r27
 c0c:	69 f4       	brne	.+26     	; 0xc28 <free+0xd8>
 c0e:	20 81       	ld	r18, Z
 c10:	31 81       	ldd	r19, Z+1	; 0x01
 c12:	24 0f       	add	r18, r20
 c14:	35 1f       	adc	r19, r21
 c16:	2e 5f       	subi	r18, 0xFE	; 254
 c18:	3f 4f       	sbci	r19, 0xFF	; 255
 c1a:	ec 01       	movw	r28, r24
 c1c:	39 83       	std	Y+1, r19	; 0x01
 c1e:	28 83       	st	Y, r18
 c20:	22 81       	ldd	r18, Z+2	; 0x02
 c22:	33 81       	ldd	r19, Z+3	; 0x03
 c24:	3b 83       	std	Y+3, r19	; 0x03
 c26:	2a 83       	std	Y+2, r18	; 0x02
 c28:	e0 e0       	ldi	r30, 0x00	; 0
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <free+0xe2>
 c2e:	fb 01       	movw	r30, r22
 c30:	bc 01       	movw	r22, r24
 c32:	db 01       	movw	r26, r22
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	13 97       	sbiw	r26, 0x03	; 3
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	b9 f7       	brne	.-18     	; 0xc2e <free+0xde>
 c40:	9b 01       	movw	r18, r22
 c42:	2e 5f       	subi	r18, 0xFE	; 254
 c44:	3f 4f       	sbci	r19, 0xFF	; 255
 c46:	8d 91       	ld	r24, X+
 c48:	9c 91       	ld	r25, X
 c4a:	11 97       	sbiw	r26, 0x01	; 1
 c4c:	82 0f       	add	r24, r18
 c4e:	93 1f       	adc	r25, r19
 c50:	40 91 15 01 	lds	r20, 0x0115
 c54:	50 91 16 01 	lds	r21, 0x0116
 c58:	48 17       	cp	r20, r24
 c5a:	59 07       	cpc	r21, r25
 c5c:	79 f4       	brne	.+30     	; 0xc7c <free+0x12c>
 c5e:	30 97       	sbiw	r30, 0x00	; 0
 c60:	29 f4       	brne	.+10     	; 0xc6c <free+0x11c>
 c62:	10 92 18 01 	sts	0x0118, r1
 c66:	10 92 17 01 	sts	0x0117, r1
 c6a:	02 c0       	rjmp	.+4      	; 0xc70 <free+0x120>
 c6c:	13 82       	std	Z+3, r1	; 0x03
 c6e:	12 82       	std	Z+2, r1	; 0x02
 c70:	22 50       	subi	r18, 0x02	; 2
 c72:	30 40       	sbci	r19, 0x00	; 0
 c74:	30 93 16 01 	sts	0x0116, r19
 c78:	20 93 15 01 	sts	0x0115, r18
 c7c:	df 91       	pop	r29
 c7e:	cf 91       	pop	r28
 c80:	08 95       	ret

00000c82 <memset>:
 c82:	dc 01       	movw	r26, r24
 c84:	01 c0       	rjmp	.+2      	; 0xc88 <memset+0x6>
 c86:	6d 93       	st	X+, r22
 c88:	41 50       	subi	r20, 0x01	; 1
 c8a:	50 40       	sbci	r21, 0x00	; 0
 c8c:	e0 f7       	brcc	.-8      	; 0xc86 <memset+0x4>
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
